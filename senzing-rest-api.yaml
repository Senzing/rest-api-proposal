openapi: 3.0.1
info:
  title: Senzing REST API
  version: "1.8.1"
  description: >-
    This is the Senzing REST API.  It describes the REST interface
    to Senzing API functions available via REST.  It leverages the
    Senzing native API which is documented at
    [https://docs.senzing.com](https://docs.senzing.com).
    <br><br>
    <b>NOTE:</b> Some end-points described here will indicate "(Supports SSE)" to
    indicate that they support "Server-sent Events" via the `text/event-stream`
    media type.  This support is activated by adding the
    `Accept: text/event-stream` header to a request to override the
    default `application/json` media type.  Further, the end-point will behave
    the similarly to its stand operation but will produce `progress` events
    at regular intervals that are equivalent to its `200` response schema.
    Upon success, the final event will be `completed` with the same response
    schema as a `200` response.  Upon failure, the final event will be
    `failed` with same schema as the `4xx` or `5xx` response (typically the
    `SzErrorResponse`)
    [https://docs.senzing.com](https://docs.senzing.com)

servers:
  - url: http://localhost:{port}
    variables:
      port:
        default: '8250'
  - url: http://senzing-api.local

paths:
  /heartbeat:
    get:
      tags:
        - Admin
      summary: >-
        Gets a heartbeat from the server to make sure it is up and
        running.  The response will include the current timestamp.
      operationId: heartbeat
      responses:
        '200':
          description: Successful response
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/SzBaseResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/SzBaseResponse'
            default:
              schema:
                $ref: '#/components/schemas/SzBaseResponse'
  /license:
    get:
      tags:
        - Admin
      summary: Get the license information.
      operationId: license
      responses:
        '200':
          description: Successful response
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/SzLicenseResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/SzLicenseResponse'
            default:
              schema:
                $ref: '#/components/schemas/SzLicenseResponse'
  /version:
    get:
      tags:
        - Admin
      summary: Get the full version information.
      operationId: version
      responses:
        '200':
          description: Successful response
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/SzVersionResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/SzVersionResponse'
            default:
              schema:
                $ref: '#/components/schemas/SzVersionResponse'
  /server-info:
    get:
      tags:
        - Admin
      summary: Get info regarding the server's state and supported features.
      operationId: getServerInfo
      responses:
        '200':
          description: Successful response
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/SzServerInfoResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/SzServerInfoResponse'
            default:
              schema:
                $ref: '#/components/schemas/SzServerInfoResponse'
  /attribute-types:
    get:
      tags:
        - Config
      summary: Get a list of configured attribute types.
      operationId: getAttributeTypes
      parameters:
        - name: withInternal
          description: >-
            Set to `true` to include internal attribute types that are generally
            not mapped by users.  This defaults to false.
          in: query
          required: false
          schema:
            type: boolean
            default: false
        - name: attributeClass
          description: >-
            If specified, this filters the list of returned attribute types
            to those of a specific attribute class.  If not specified then no
            filtering on attribute class is performed and all are returned.
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/SzAttributeClass'
        - name: featureType
          description: >-
            If specified, this filters the list of returned attribute types
            to those belonging to a specific feature type.  If not specified
            then no filtering on feature type is performed and all are returned.
          in: query
          required: false
          schema:
            type: string
            default: null
        - $ref: '#/components/parameters/withRawQueryParam'
      responses:
        '200':
          description: Successful response
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/SzAttributeTypesResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/SzAttributeTypesResponse'
            default:
              schema:
                $ref: '#/components/schemas/SzAttributeTypesResponse'
        '500':
          $ref: '#/components/responses/ServerError'
  /attribute-types/{attributeCode}:
    get:
      tags:
        - Config
      summary: Get the attribute type identified by the attribute code.
      operationId: getAttributeType
      parameters:
        - name: attributeCode
          description: >-
            The attribute code that uniquely identifies the attribute type.
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/withRawQueryParam'
      responses:
        '200':
          description: Successful response
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/SzAttributeTypeResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/SzAttributeTypeResponse'
            default:
              schema:
                $ref: '#/components/schemas/SzAttributeTypeResponse'
        '404':
          description: >-
            If the specified attribute code is not recognized.
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/SzErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/SzErrorResponse'
            default:
              schema:
                $ref: '#/components/schemas/SzErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'
  /data-sources:
    get:
      tags:
        - Config
      summary: Get a list of configured data sources.
      operationId: listDataSources
      parameters:
        - $ref: '#/components/parameters/withRawQueryParam'
      responses:
        '200':
          description: Successful response
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/SzDataSourcesResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/SzDataSourcesResponse'
            default:
              schema:
                $ref: '#/components/schemas/SzDataSourcesResponse'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Config
      summary: >-
        Obtains the current default configuration, adds the specified data
        sources and sets the modified configuration as the new default
        configuration -- returning the set of all configured data sources.
      operationId: addDataSources
      parameters:
        - name: dataSource
          description: >-
            The multi-valued query parameter where each value is a data source
            code identifying data sources to be created.
          in: query
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/withRawQueryParam'
      requestBody:
        description: >-
          The optional request body to describe the data sources to be created.
          This can be specified as an alternative to the `dataSource` parameter
          or in addition to it.  The content can be an array of string data
          source codes or `SzDataSource` objects.  It may also be a plain-text
          unquoted string that is simply a single data source code.
        required: false
        content:
          application/json; charset=UTF-8:
            schema:
              oneOf:
                - type: array
                  items:
                    $ref: '#/components/schemas/SzDataSourceDescriptor'
                - $ref: '#/components/schemas/SzDataSourceDescriptor'
          application/json:
            schema:
              oneOf:
                - type: array
                  items:
                    $ref: '#/components/schemas/SzDataSourceDescriptor'
                - $ref: '#/components/schemas/SzDataSourceDescriptor'
          text/plain; charset=UTF=8:
            schema:
              type: string
          text/plain:
            schema:
              type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/SzDataSourcesResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/SzDataSourcesResponse'
            default:
              schema:
                $ref: '#/components/schemas/SzDataSourcesResponse'
        '403':
          description: >-
            If the server was started in read-only mode and so the operation
            is not permitted.  This is also returned if the server was started
            with a file-based configuration rather than a configuration stored
            in the database (i.e.: `G2CONFIGFILE` is specified in an INI file)
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/SzErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/SzErrorResponse'
            default:
              schema:
                $ref: '#/components/schemas/SzErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'
  /data-sources/{dataSourceCode}:
    get:
      tags:
        - Config
      summary: Gets the details on the specified data source.
      operationId: getDataSource
      parameters:
        - $ref: '#/components/parameters/dataSourceCodePathParam'
        - $ref: '#/components/parameters/withRawQueryParam'
      responses:
        '200':
          description: Successful response
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/SzDataSourceResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/SzDataSourceResponse'
            default:
              schema:
                $ref: '#/components/schemas/SzDataSourceResponse'
        '500':
          $ref: '#/components/responses/ServerError'
  /entity-types:
    get:
      tags:
        - Config
      summary: Get a list of configured entity types.
      operationId: listEntityTypes
      parameters:
        - name: entityClass
          description: >-
            If specified, this filters the list of returned entity types to
            those having the specified entity class.  If not specified then no
            filtering on entity class is performed and all are returned.
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/SzAttributeClass'
        - $ref: '#/components/parameters/withRawQueryParam'
      responses:
        '200':
          description: Successful response
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/SzEntityTypesResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/SzEntityTypesResponse'
            default:
              schema:
                $ref: '#/components/schemas/SzEntityTypesResponse'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Config
      summary: >-
        Obtains the current default configuration, adds the specified entity
        types and sets the modified configuration as the new default
        configuration -- returning the set of all configured entity types.
      operationId: addEntityTypes
      parameters:
        - name: entityType
          description: >-
            The multi-valued query parameter where each value is an entity type
            code identifying entity types to be created.
          in: query
          required: false
          schema:
            type: string
        - name: entityClass
          in: query
          required: false
          schema:
            type: string
          description: >-
            The optional single-valued query parameter to specify the entity
            class to use for all created entity types (i.e.: it is associated
            with all values of `entityType` specified).  This can be omitted
            if the entity types are fully described by an array of
            `SzEntityType` objects in the request body.
      requestBody:
        description: >-
          The optional request body to describe the entity types to be created.
          This can be specified as an alternative to the `entityType` parameter
          or in addition to it.  The content must be an array of string entity
          type codes or `SzEntityType` objects.  It may also be a plain-text
          unquoted string that is simply a single entity type code.
        required: false
        content:
          application/json; charset=UTF-8:
            schema:
              oneOf:
                - type: array
                  items:
                    $ref: '#/components/schemas/SzEntityTypeDescriptor'
                - $ref: '#/components/schemas/SzEntityTypeDescriptor'
          application/json:
            schema:
              oneOf:
                - type: array
                  items:
                    $ref: '#/components/schemas/SzEntityTypeDescriptor'
                - $ref: '#/components/schemas/SzEntityTypeDescriptor'
          text/plain; charset=UTF=8:
            schema:
              type: string
          text/plain:
            schema:
              type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/SzEntityTypesResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/SzEntityTypesResponse'
            default:
              schema:
                $ref: '#/components/schemas/SzEntityTypesResponse'
        '403':
          description: >-
            If the server was started in read-only mode and so the operation
            is not permitted.  This is also returned if the server was started
            with a file-based configuration rather than a configuration stored
            in the database (i.e.: `G2CONFIGFILE` is specified in an INI file)
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/SzErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/SzErrorResponse'
            default:
              schema:
                $ref: '#/components/schemas/SzErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'
  /entity-types/{entityTypeCode}:
    get:
      tags:
        - Config
      summary: Gets the details on the specified entity type.
      operationId: getEntityType
      parameters:
        - $ref: '#/components/parameters/entityTypeCodePathParam'
        - $ref: '#/components/parameters/withRawQueryParam'
      responses:
        '200':
          description: Successful response
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/SzEntityTypeResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/SzEntityTypeResponse'
            default:
              schema:
                $ref: '#/components/schemas/SzEntityTypeResponse'
        '500':
          $ref: '#/components/responses/ServerError'
  /entity-classes:
    get:
      tags:
        - Config
      summary: Get a list of configured entity classes.
      operationId: listEntityClasses
      parameters:
        - $ref: '#/components/parameters/withRawQueryParam'
      responses:
        '200':
          description: Successful response
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/SzEntityClassesResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/SzEntityClassesResponse'
            default:
              schema:
                $ref: '#/components/schemas/SzEntityClassesResponse'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Config
      summary: >-
        Obtains the current default configuration, adds the specified entity
        classes and sets the modified configuration as the new default
        configuration -- returning the set of all configured entity classes.
      operationId: addEntityClasses
      parameters:
        - name: entityClass
          description: >-
            The multi-valued query parameter where each value is an entity class
            code identifying entity classes to be created.
          in: query
          required: false
          schema:
            type: string
        - name: resolving
          description: >-
            Optional parameter to specify whether or not entities having an
            entity type belonging to this entity class will resolve against
            each other.  This is `true` if they will resolve and `false` if
            they will not.  If entity classes are specified in the request
            body then the value for this parameter is used for the default
            value if the `resolving` property is absent or `null` on any of
            those entity classes.  If this parameter is not provided then it
            defaults to `true`.
          in: query
          required: false
          schema:
            type: boolean
            default: true
      requestBody:
        description: >-
          The optional request body to describe the entity classes to be
          created.  This can be specified as an alternative to the `entityClass`
          parameter or in addition to it.  The content can be an array of string
          entity class codes or `SzEntityClass` objects.
        required: false
        content:
          application/json; charset=UTF-8:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/SzEntityClassDescriptor'
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/SzEntityClassDescriptor'
      responses:
        '200':
          description: Successful response
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/SzEntityClassesResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/SzEntityClassesResponse'
            default:
              schema:
                $ref: '#/components/schemas/SzEntityClassesResponse'
        '403':
          description: >-
            If the server was started in read-only mode and so the operation
            is not permitted.  This is also returned if the server was started
            with a file-based configuration rather than a configuration stored
            in the database (i.e.: `G2CONFIGFILE` is specified in an INI file)
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/SzErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/SzErrorResponse'
            default:
              schema:
                $ref: '#/components/schemas/SzErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'
  /entity-classes/{entityClassCode}:
    get:
      tags:
        - Config
      summary: Gets the details on the specified entity class.
      operationId: getEntityClass
      parameters:
        - $ref: '#/components/parameters/entityClassCodePathParam'
        - $ref: '#/components/parameters/withRawQueryParam'
      responses:
        '200':
          description: Successful response
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/SzEntityClassResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/SzEntityClassResponse'
            default:
              schema:
                $ref: '#/components/schemas/SzEntityClassResponse'
        '500':
          $ref: '#/components/responses/ServerError'
  /entity-classes/{entityClassCode}/entity-types:
    get:
      tags:
        - Config
      summary: >-
        Get a list of configured entity types for the identified entity class.
      operationId: listEntityTypesByClass
      parameters:
        - $ref: '#/components/parameters/entityClassCodePathParam'
        - $ref: '#/components/parameters/withRawQueryParam'
      responses:
        '200':
          description: Successful response
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/SzEntityTypesResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/SzEntityTypesResponse'
            default:
              schema:
                $ref: '#/components/schemas/SzEntityTypesResponse'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Config
      summary: >-
        Obtains the current default configuration, adds the specified entity
        types and sets the modified configuration as the new default
        configuration -- returning the set of all configured entity types.
      operationId: addEntityTypesForClass
      parameters:
        - $ref: '#/components/parameters/entityClassCodePathParam'
        - name: entityType
          description: >-
            The multi-valued query parameter where each value is an entity type
            code identifying entity types to be created.
          in: query
          required: false
          schema:
            type: string
      requestBody:
        description: >-
          The optional request body to describe the entity types to be created.
          This can be specified as an alternative to the `entityType` parameter
          or in addition to it.  The content must be an array of `SzEntityType`
          objects and the entity classes in the `SzEntityType` objects must
          match the entity class in the path.
        required: false
        content:
          application/json; charset=UTF-8:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/SzEntityTypeDescriptor'
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/SzEntityTypeDescriptor'
      responses:
        '200':
          description: Successful response
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/SzEntityTypesResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/SzEntityTypesResponse'
            default:
              schema:
                $ref: '#/components/schemas/SzEntityTypesResponse'
        '403':
          description: >-
            If the server was started in read-only mode and so the operation
            is not permitted.  This is also returned if the server was started
            with a file-based configuration rather than a configuration stored
            in the database (i.e.: `G2CONFIGFILE` is specified in an INI file)
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/SzErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/SzErrorResponse'
            default:
              schema:
                $ref: '#/components/schemas/SzErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'
  /entity-classes/{entityClassCode}/entity-types/{entityTypeCode}:
    get:
      tags:
        - Config
      summary: Gets the details on the specified entity type.
      operationId: getEntityTypeByClass
      parameters:
        - $ref: '#/components/parameters/entityClassCodePathParam'
        - $ref: '#/components/parameters/entityTypeCodePathParam'
        - $ref: '#/components/parameters/withRawQueryParam'
      responses:
        '200':
          description: Successful response
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/SzEntityTypeResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/SzEntityTypeResponse'
            default:
              schema:
                $ref: '#/components/schemas/SzEntityTypeResponse'
        '500':
          $ref: '#/components/responses/ServerError'
  /config/current:
    get:
      tags:
        - Config
      summary: Gets the current configuration as raw JSON, no interpretation.
      operationId: getCurrentConfig
      responses:
        '200':
          description: Successful response
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/SzConfigResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/SzConfigResponse'
            default:
              schema:
                $ref: '#/components/schemas/SzConfigResponse'
        '500':
          $ref: '#/components/responses/ServerError'
  /config/default:
    get:
      tags:
        - Config
      summary: Gets the default configuration as raw JSON, no interpretation.
      operationId: getDefaultConfig
      responses:
        '200':
          description: Successful response
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/SzConfigResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/SzConfigResponse'
            default:
              schema:
                $ref: '#/components/schemas/SzConfigResponse'
        '500':
          $ref: '#/components/responses/ServerError'
  /data-sources/{dataSourceCode}/records:
    post:
      tags:
        - Entity Data
      summary: Load a new record in
      operationId: addRecordWithReturnedRecordId
      parameters:
        - $ref: '#/components/parameters/dataSourceCodePathParam'
        - name: loadId
          description: >-
            The load ID to associate with the loaded record.
          in: query
          required: false
          schema:
            type: string
      requestBody:
        description: >-
          The record data as JSON.  The format of the JSON is described
          by the [Senzing Generic Entity Specification](https://senzing.zendesk.com/hc/en-us/articles/231925448-Generic-Entity-Specification).
          The specified JSON may include or exclude the DATA_SOURCE field.
          It will be added if excluded.  If included, it must match the
          data source code in the path parameters.
        required: true
        content:
          application/json; charset=UTF-8:
            schema:
              type: object
              additionalProperties: {}
          application/json:
            schema:
              type: object
              additionalProperties: {}
      responses:
        '200':
          description: Successful response
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/SzLoadRecordResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/SzLoadRecordResponse'
            default:
              schema:
                $ref: '#/components/schemas/SzLoadRecordResponse'
        '400':
          description: >-
            If the specified data contains a DATA_SOURCE field that is not
            consistent with the dataSourceCode in the path of the request
            or if the specified content body is not formatted as JSON.
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/SzErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/SzErrorResponse'
            default:
              schema:
                $ref: '#/components/schemas/SzErrorResponse'
        '403':
          description: >-
            If the server was started in read-only mode and so the operation
            is not permitted.
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/SzErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/SzErrorResponse'
            default:
              schema:
                $ref: '#/components/schemas/SzErrorResponse'
        '404':
          description: >-
            If the specified data source code in the path is not recognized.
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/SzErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/SzErrorResponse'
            default:
              schema:
                $ref: '#/components/schemas/SzErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'
  /data-sources/{dataSourceCode}/records/{recordId}:
    get:
      tags:
        - Entity Data
      summary: Get an entity record by data source and record ID.
      operationId: getDataSourceRecord
      parameters:
        - $ref: '#/components/parameters/dataSourceCodePathParam'
        - $ref: '#/components/parameters/recordIdPathParam'
        - $ref: '#/components/parameters/withRawQueryParam'
      responses:
        '200':
          description: Successul response
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/SzRecordResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/SzRecordResponse'
            default:
              schema:
                $ref: '#/components/schemas/SzRecordResponse'
        '404':
          description: If data source or record ID are not found.
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/SzErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/SzErrorResponse'
            default:
              schema:
                $ref: '#/components/schemas/SzErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'
    put:
      tags:
        - Entity Data
      summary: >-
        Load a new record or replace a record in a data source with a
        specific record ID.
      operationId: addRecord
      parameters:
        - $ref: '#/components/parameters/dataSourceCodePathParam'
        - $ref: '#/components/parameters/recordIdPathParam'
        - name: loadId
          description: >-
            The load ID to associate with the loaded record.
          in: query
          required: false
          schema:
            type: string
      requestBody:
        description: >-
          The record data as JSON.  The format of the JSON is described
          by the [Senzing Generic Entity Specification](https://senzing.zendesk.com/hc/en-us/articles/231925448-Generic-Entity-Specification).
          The specified JSON may include or exclude the DATA_SOURCE and
          RECORD_ID fields.  Any excluded field will be added to the JSON
          accordingly.  Any included field in the JSON, must match the
          respective path parameter for data source code or record ID.
        required: true
        content:
          application/json; charset=UTF-8:
            schema:
              type: object
              additionalProperties: {}
          application/json:
            schema:
              type: object
              additionalProperties: {}
      responses:
        '200':
          description: Successful response
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/SzLoadRecordResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/SzLoadRecordResponse'
            default:
              schema:
                $ref: '#/components/schemas/SzLoadRecordResponse'
        '400':
          description: >-
            If the specified data contains a DATA_SOURCE field that is not
            consistent with the dataSourceCode in the path of the request
            or if the specified content body is not formatted as JSON.
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/SzErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/SzErrorResponse'
            default:
              schema:
                $ref: '#/components/schemas/SzErrorResponse'
        '403':
          description: >-
            If the server was started in read-only mode and so the operation
            is not permitted.
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/SzErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/SzErrorResponse'
            default:
              schema:
                $ref: '#/components/schemas/SzErrorResponse'
        '404':
          description: >-
            If the specified data source code in the path is not recognized.
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/SzErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/SzErrorResponse'
            default:
              schema:
                $ref: '#/components/schemas/SzErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'
  /entities/{entityId}:
    get:
      tags:
        - Entity Data
      summary: Get a resolved entity by entity ID.
      operationId: getEntityByEntityId
      parameters:
      - name: entityId
        description: >-
          The unique numeric ID that identifies that entity being requested.
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - $ref: '#/components/parameters/featureModeQueryParam'
      - $ref: '#/components/parameters/forceMinimalQueryParam'
      - $ref: '#/components/parameters/withFeatureStatsQueryParam'
      - $ref: '#/components/parameters/withDerivedFeaturesQueryParam'
      - $ref: '#/components/parameters/withRelatedQueryParam'
      - $ref: '#/components/parameters/withRawQueryParam'
      responses:
        '200':
          description: Successful response
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/SzEntityResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/SzEntityResponse'
            default:
              schema:
                $ref: '#/components/schemas/SzEntityResponse'
        '404':
          description: If the entity ID is not found.
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/SzErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/SzErrorResponse'
            default:
              schema:
                $ref: '#/components/schemas/SzErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'
  /entities/{entityId}/why:
    get:
      tags:
        - Entity Data
      summary: >-
        Returns an analysis of why the entity for the respective
        entity ID resolved.
      operationId: whyEntityByEntityID
      parameters:
        - name: entityId
          description: >-
            The unique numeric ID that identifies that entity being requested.
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - $ref: '#/components/parameters/whyWithRelationshipsQueryParam'
        - $ref: '#/components/parameters/whyWithFeatureStatsQueryParam'
        - $ref: '#/components/parameters/whyWithDerivedFeaturesQueryParam'
        - $ref: '#/components/parameters/featureModeQueryParam'
        - $ref: '#/components/parameters/forceMinimalQueryParam'
        - $ref: '#/components/parameters/withRawQueryParam'
      responses:
        '200':
          description: Successul response
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/SzWhyEntityResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/SzWhyEntityResponse'
            default:
              schema:
                $ref: '#/components/schemas/SzWhyEntityResponse'
        '404':
          description: If entity ID is not found.
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/SzErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/SzErrorResponse'
            default:
              schema:
                $ref: '#/components/schemas/SzErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'
  /data-sources/{dataSourceCode}/records/{recordId}/entity:
    get:
      tags:
        - Entity Data
      summary: Get a resolved entity by data source and record ID.
      operationId: getEntityByRecordId
      parameters:
        - $ref: '#/components/parameters/dataSourceCodePathParam'
        - $ref: '#/components/parameters/recordIdPathParam'
        - $ref: '#/components/parameters/featureModeQueryParam'
        - $ref: '#/components/parameters/withFeatureStatsQueryParam'
        - $ref: '#/components/parameters/withDerivedFeaturesQueryParam'
        - $ref: '#/components/parameters/forceMinimalQueryParam'
        - $ref: '#/components/parameters/withRelatedQueryParam'
        - $ref: '#/components/parameters/withRawQueryParam'
      responses:
        '200':
          description: default response
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/SzEntityResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/SzEntityResponse'
            default:
              schema:
                $ref: '#/components/schemas/SzEntityResponse'
        '404':
          description: If data source or record ID are not found.
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/SzErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/SzErrorResponse'
            default:
              schema:
                $ref: '#/components/schemas/SzErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'
  /data-sources/{dataSourceCode}/records/{recordId}/entity/why:
    get:
      tags:
        - Entity Data
      summary: >-
        Returns an analysis of why the entity for the record with the
        respective data source code and record ID resolved.
      operationId: whyEntityByRecordID
      parameters:
        - $ref: '#/components/parameters/dataSourceCodePathParam'
        - $ref: '#/components/parameters/recordIdPathParam'
        - $ref: '#/components/parameters/whyWithRelationshipsQueryParam'
        - $ref: '#/components/parameters/whyWithFeatureStatsQueryParam'
        - $ref: '#/components/parameters/whyWithDerivedFeaturesQueryParam'
        - $ref: '#/components/parameters/featureModeQueryParam'
        - $ref: '#/components/parameters/forceMinimalQueryParam'
        - $ref: '#/components/parameters/withRawQueryParam'
      responses:
        '200':
          description: Successul response
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/SzWhyEntityResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/SzWhyEntityResponse'
            default:
              schema:
                $ref: '#/components/schemas/SzWhyEntityResponse'
        '404':
          description: If data source or record ID are not found.
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/SzErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/SzErrorResponse'
            default:
              schema:
                $ref: '#/components/schemas/SzErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'
  /why/records:
    get:
      tags:
        - Entity Data
      summary: >-
        Returns an analysis of why the records identified by the data source
        and record ID's in the query parameters resolved or did not resolve.
      operationId: whyRecords
      parameters:
        - name: dataSource1
          description: >-
            The data source for the first record.
          required: true
          in: query
          schema:
            type: string
        - name: recordId1
          description: >-
            The record ID for the first record.
          required: true
          in: query
          schema:
            type: string
        - name: dataSource2
          description: >-
            The data source for the second record.
          required: true
          in: query
          schema:
            type: string
        - name: recordId2
          description: >-
            The data source for the second record.
          required: true
          in: query
          schema:
            type: string
        - $ref: '#/components/parameters/whyWithRelationshipsQueryParam'
        - $ref: '#/components/parameters/whyWithFeatureStatsQueryParam'
        - $ref: '#/components/parameters/whyWithDerivedFeaturesQueryParam'
        - $ref: '#/components/parameters/featureModeQueryParam'
        - $ref: '#/components/parameters/forceMinimalQueryParam'
        - $ref: '#/components/parameters/withRawQueryParam'
      responses:
        '200':
          description: Successul response
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/SzWhyRecordsResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/SzWhyRecordsResponse'
            default:
              schema:
                $ref: '#/components/schemas/SzWhyRecordsResponse'
        '404':
          description: If data source or record ID are not found.
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/SzErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/SzErrorResponse'
            default:
              schema:
                $ref: '#/components/schemas/SzErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'
  /entities:
    get:
      tags:
        - Entity Data
      summary: >-
        Search for entities that would match or relate to the provided
        entity features.
      operationId: searchByAttributes
      parameters:
      - name: attrs
        description: >-
          The record JSON describing the entity attributes in the same
          format as how an entity record would be loaded.  The specified
          attributes will be treated as a hypothetical record being loaded
          and the result will be anything that would have matched or related
          to it.  *NOTE*: normally, this parameter is required and the JSON
          value must be URL-encoded; however, you may instead provide short-hand
          parameters that begin with the prefix `attr_` and a suffix that is
          the JSON property you want added to the JSON.  For example the
          parameter `attr_NAME_FULL` would set the `NAME_FULL` property in the
          JSON.  This can be handy when you are manually constructing the URL
          and you want to avoid having to URL encode JSON.  The short-hand
          parameters that are formated as `attr_[JSON_PROPERTY]` will be
          *ignored* if the `attrs` parameter is provided.
        in: query
        required: false
        schema:
          type: object
          additionalProperties: {}
        example: >-
          {
            "NAME_TYPE": "PRIMARY",
            "NAME_FIRST": "JANE",
            "NAME_LAST": "SMITH",
            "ADDR_TYPE": "HOME",
            "ADDR_LINE1": "653 STATE ROUTE 7",
            "ADDR_CITY": "FRESNO",
            "ADDR_STATE": "CA",
            "ADDR_POSTAL_CODE": "55073-1234"
          }
      - name: withRelationships
        description: >-
          Set to `false` to suppress inclusion of related entity information.
          This defaults to `true` for backwards compatibility with previous
          implementations.
        in: query
        required: false
        schema:
          type: boolean
          default: true
      - $ref: '#/components/parameters/featureModeQueryParam'
      - $ref: '#/components/parameters/withFeatureStatsQueryParam'
      - $ref: '#/components/parameters/withDerivedFeaturesQueryParam'
      - $ref: '#/components/parameters/forceMinimalQueryParam'
      - $ref: '#/components/parameters/withRawQueryParam'
      responses:
        '200':
          description: Successful response
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/SzAttributeSearchResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/SzAttributeSearchResponse'
            default:
              schema:
                $ref: '#/components/schemas/SzAttributeSearchResponse'
        '400':
          description: >-
              If the specified attrs parameter is missing or is not formatted
              properly.
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/SzErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/SzErrorResponse'
            default:
              schema:
                $ref: '#/components/schemas/SzErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'
  /entity-paths:
    get:
      tags:
        - Entity Graph
      summary: >-
        Finds a path between two entities identified by entity ID or by
        data sources and record IDs of constituent records.  You may provide
        entity IDs or data source and record IDs to identify the from/to
        entities in the path, but you may not mix and match.
      operationId: findPathByEntityID
      parameters:
      - name: from
        description: >-
          The `SzEntityIdentifier` for the first entity for the path either as
          an entity ID or an encoded `SzRecordId` for the constituent record.
          Whatever format is used for the "from" parameter must match the format
          of the "to" parameter.  NOTE: An encoded `SzRecordId` can EITHER
          be encoded as JSON or as a delimited string where the first character
          is the delimiter and the remainder is parsed as a data source prefix
          (up to the second occurrence of the delimiter) and a record ID suffix
          (all characters after the second occurrence of the delimiter).  For
          example: `{"src":"PEOPLE","id":"12345ABC"}` or `:PEOPLE:12345ABC`.
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/SzEntityIdentifier'
      - name: to
        description: >-
          The `SzEntityIdentifier` for the last entity for the path either as
          an entity ID or a encoded `SzRecordId` for the constituent record.
          Whatever format is used for the "to" parameter must match the
          format of the "from" parameter.  NOTE: An encoded `SzRecordId` can
          EITHER be encoded as JSON or as a delimited string where the first
          character is the delimiter and the remainder is parsed as a data
          source prefix (up to the second occurrence of the delimiter) and a
          record ID suffix (all characters after the second occurrence of the
          delimiter).  For example: `{"src":"PEOPLE","id":"12345ABC"}` or
          `:PEOPLE:12345ABC`.
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/SzEntityIdentifier'
      - name: maxDegrees
        description: >-
            The maximum number of degrees to look for a path from the first
            entity to the last entity.
        in: query
        required: false
        schema:
          type: integer
          format: int8
          minimum: 0
          maximum: 100
          default: 3
      - name: x
        description: >-
          Repeating query parameter containing SzEntityIdentifier definitions
          that identify entities to be avoided or forbidden from the path
          (depending on the forbidAvoided parameter).  The entity identifiers
          are either all 64-bit long integers representing entity IDs or they
          are all encoded SzRecordId instances identifying records that are
          part of the resolved entities to exclude.  If this parameter is not
          provided, then the default is to NOT exclude any entities.  If both
          this parameter and the `avoidEntities` parameter are specified then
          the values are merged.  NOTE: An encoded SzRecordId can EITHER be encoded
          as JSON or as a delimited string where the first character is the
          delimiter and the remainder is parsed as a data source prefix (up to
          the second occurrence of the delimiter) and a record ID suffix (all
          characters after the second occurrence of the delimiter).  For
          example: `{"src":"PEOPLE","id":"12345ABC"}` or `:PEOPLE:12345ABC`.
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/SzEntityIdentifier'
      - name: avoidEntities
        description: >-
          Single query parameter containing multiple `SzEntityIdentifier`
          definitions as a JSON array or a simple comma-separated array that
          identify entities to be avoided or forbidden from the path
          (depending on the forbidAvoided parameter).  The entity identifiers
          are either all 64-bit long integers representing entity IDs or they
          are all encoded `SzRecordId` instances identifying records that are
          part of the resolved entities to exclude.  At least one entity
          identifier is required.  If both this parameter and one or more `x`
          parameters are specified then the values are merged.  NOTE: An
          encoded `SzRecordId` can EITHER be encoded as JSON or as a delimited
          string where the first character is the delimiter and the remainder
          is parsed as a data source prefix (up to the second occurrence of the
          delimiter) and a record ID suffix (all characters after the second
          occurrence of the delimiter).  For example:
          `{"src":"PEOPLE","id":"12345ABC"}` or `:PEOPLE:12345ABC`.
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/SzEntityIdentifiers'
      - name: forbidAvoided
        description: >-
          If the avoidEntities parameter is provided then this flag is used to
          control whether or not to forbid the avoided entities rather than
          include them in the path as a "last resort".
        in: query
        required: false
        schema:
          type: boolean
          default: false
      - name: s
        description: >-
          The multi-valued query parameter where each value is a data source
          code identifying data sources for which one must be included in the
          entities for the path.  If not provided, then the default is to NOT
          require any specific data sources.
        in: query
        required: false
        schema:
          type: array
          items:
            type: string
      - $ref: '#/components/parameters/featureModeQueryParam'
      - $ref: '#/components/parameters/withFeatureStatsQueryParam'
      - $ref: '#/components/parameters/withDerivedFeaturesQueryParam'
      - $ref: '#/components/parameters/forceMinimalQueryParam'
      - $ref: '#/components/parameters/withRawQueryParam'
      responses:
        '200':
          description: Successful response
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/SzEntityPathResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/SzEntityPathResponse'
            default:
              schema:
                $ref: '#/components/schemas/SzEntityPathResponse'
        '400':
          description: >-
            If the 'from' or 'to' parameters are missing or if any of the
            parameters are not formatted as expected.  Also, if any of the
            identified entities or records cannot be found.
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/SzErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/SzErrorResponse'
            default:
              schema:
                $ref: '#/components/schemas/SzErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'
  /entity-networks:
    get:
      tags:
        - Entity Graph
      summary: >-
        Finds the entity network around one or more entities identified by
        their entity IDs or by the data source codes and record ID's of their
        constituent records.  This attempts to find paths between the specified
        entities.  If no paths exist, then island networks are returned
        with each island network containing up to a specified number of
        related entities.
      operationId: findNetworkByEntityID
      parameters:
      - name: e
        description: >-
          Repeating query parameter containing `SzEntityIdentifier` definitions
          that identify entities to be included in the entity network.  The
          entity identifiers are either all 64-bit long integers representing
          entity IDs or they are all encoded `SzRecordId` instances identifying
          records that are part of the resolved entities to avoid.  At least
          one entity identifier is required.  If both this parameter and the
          `entities` parameter are specified then the values are merged.
          NOTE: An encoded SzRecordId can EITHER be encoded as JSON or as a
          delimited string where the first character is the delimiter and the
          remainder is parsed as a data source prefix (up to the second
          occurrence of the delimiter) and a record ID suffix (all characters
          after the second occurrence of the delimiter).  For example:
          `{"src":"PEOPLE","id":"12345ABC"}` or `:PEOPLE:12345ABC`.
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/SzEntityIdentifier'
      - name: entities
        description: >-
          Single query parameter containing multiple SzEntityIdentifier
          definitions that identify entities to be included in the entity
          network as a JSON array or a simple comma-separated array.  The
          entity identifiers are either all 64-bit long integers representing
          entity IDs or they are all encoded `SzRecordId` instances identifying
          records that are part of the resolved entities to avoid.  At least
          one entity identifier is required.  If both this parameter and one
          or more `e` parameters are specified then the values are merged.
          NOTE: An encoded `SzRecordId` can EITHER be encoded as JSON or as a
          delimited string where the first character is the delimiter and the
          remainder is parsed as a data source prefix (up to the second
          occurrence of the delimiter) and a record ID suffix (all characters
          after the second occurrence of the delimiter).  For example:
          `{"src":"PEOPLE","id":"12345ABC"}` or `:PEOPLE:12345ABC`.
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/SzEntityIdentifiers'
      - name: maxDegrees
        description: >-
            The maximum number of degrees to look for a path between the
            specified entities.
        in: query
        required: false
        schema:
          type: integer
          format: int8
          minimum: 0
          maximum: 100
          default: 5
      - name: buildOut
        description: >-
            The maximum number of degrees to build out around each of the
            specified entities regardless of those entities being on the
            path between entities.
        in: query
        required: false
        schema:
          type: integer
          format: int8
          minimum: 0
          maximum: 100
          default: 1
      - name: maxEntities
        description: >-
            The maximum number of entities to return to prevent responses
            that are too large.
        in: query
        required: false
        schema:
          type: integer
          format: int32
          minimum: 0
          default: 1000
      - $ref: '#/components/parameters/featureModeQueryParam'
      - $ref: '#/components/parameters/withFeatureStatsQueryParam'
      - $ref: '#/components/parameters/withDerivedFeaturesQueryParam'
      - $ref: '#/components/parameters/forceMinimalQueryParam'
      - $ref: '#/components/parameters/withRawQueryParam'
      responses:
        '200':
          description: Successful response
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/SzEntityNetworkResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/SzEntityNetworkResponse'
            default:
              schema:
                $ref: '#/components/schemas/SzEntityNetworkResponse'
        '400':
          description: >-
            If the 'e' entity identifiers parameter is missing or if any of the
            parameters are not formatted as expected.  Also, if any of the
            identified entities or records cannot be found.
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/SzErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/SzErrorResponse'
            default:
              schema:
                $ref: '#/components/schemas/SzErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'
  /bulk-data/analyze:
    post:
      tags:
        - Bulk Data
      summary: Analyze a bulk data set of records. (Supports SSE)
      operationId: analyzeBulkRecords
      parameters:
        - $ref: '#/components/parameters/progressPeriodParam'
      requestBody:
        description: >-
          The bulk record data as a single JSON record per line, a JSON array,
          or a CSV.  Further, multipart/form-data can be provided with the
          "data" property representing the record data as described above.  Set
          your content type accordingly.  The data should be in pre-mapped
          format using JSON property names or CSV column names as described by
          the [Senzing Generic Entity Specification](https://senzing.zendesk.com/hc/en-us/articles/231925448-Generic-Entity-Specification).
        required: true
        content:
          application/x-jsonlines; charset=UTF-8:
            schema:
              type: string
          application/x-jsonlines:
            schema:
              type: string
          application/json; charset=UTF-8:
            schema:
              type: array
              items:
                type: object
                additionalProperties: {}
          application/json:
            schema:
              type: array
              items:
                type: object
                additionalProperties: {}
          text/csv; charset=UTF-8:
            schema:
              type: string
          text/csv:
            schema:
              type: string
          text/plain; charset=UTF-8:
            schema:
              type: string
          text/plain:
            schema:
              type: string
          multipart/form-data:
            schema:
              type: object
              properties:
                  data:
                    type: string
                    format: binary
      responses:
        '200':
          description: Successful response.
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/SzBulkDataAnalysisResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/SzBulkDataAnalysisResponse'
            default:
              schema:
                $ref: '#/components/schemas/SzBulkDataAnalysisResponse'
        '500':
          $ref: '#/components/responses/ServerError'
  /bulk-data/load:
    post:
      tags:
        - Bulk Data
      summary: Load the records in the provided bulk data set. (supports SSE)
      operationId: loadBulkRecords
      parameters:
        - name: dataSource
          description: >-
            Used to set the overriding data source for the records.  This data source
            will be assigned to every record unless the record already has a data source
            and that data source has a specific override specified by a `dataSource_xxxx`
            parameter.  For example `dataSource_EMPL` will map the `EMPL` data source
            to the specified value.  If no override is provided then the data source
            specified for the record is used directly and if the record has no data
            source then it will fail to load.
          in: query
          required: false
          schema:
            type: string
        - name: entityType
          description: >-
            Used to set the overriding entity type for the records.  This entity type
            will be assigned to every record unless the record already has an entity type
            and that data source has a specific override specified by a `entityType_xxxx`
            parameter.  For example `entityType_PERSON` will map the `PERSON` entity type
            to the specified value.  If no override is provided then the entity type
            specified for the record is used directly, unless the record has no entity
            type in which case an entity type by the same name as the data source is used.
          in: query
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/progressPeriodParam'
      requestBody:
        description: >-
          The bulk record data as a single JSON record per line, a JSON array,
          or a CSV.  Further, multipart/form-data can be provided with the
          "data" property representing the record data as described above.  Set
          your content type accordingly.  The data should be in pre-mapped
          format using JSON property names or CSV column names as described by
          the [Senzing Generic Entity Specification](https://senzing.zendesk.com/hc/en-us/articles/231925448-Generic-Entity-Specification).
        required: true
        content:
          application/x-jsonlines; charset=UTF-8:
            schema:
              type: string
          application/x-jsonlines:
            schema:
              type: string
          application/json; charset=UTF-8:
            schema:
              type: array
              items:
                type: object
                additionalProperties: {}
          application/json:
            schema:
              type: array
              items:
                type: object
                additionalProperties: {}
          text/csv; charset=UTF-8:
            schema:
              type: string
          text/csv:
            schema:
              type: string
          text/plain; charset=UTF-8:
            schema:
              type: string
          text/plain:
            schema:
              type: string
          multipart/form-data:
            schema:
              type: object
              properties:
                data:
                  type: string
                  format: binary
      responses:
        '200':
          description: Successful response
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/SzBulkLoadResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/SzBulkLoadResponse'
            default:
              schema:
                $ref: '#/components/schemas/SzBulkLoadResponse'
        '403':
          description: >-
            If the server was started in read-only mode and so the operation
            is not permitted.
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/SzErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/SzErrorResponse'
            default:
              schema:
                $ref: '#/components/schemas/SzErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'
components:
  parameters:
    withRawQueryParam:
      in: query
      name: withRaw
      required: false
      description: >-
        Whether or not to include the raw JSON response from the underlying
        native API.  This raw response may include additional details but
        lack some of the abstraction the standard response provides.  If
        true, then the 'rawData' field in the response will be a non-null
        value and contain the additional details.
      schema:
        type: boolean
        default: false
    withRelatedQueryParam:
      in: query
      name: withRelated
      required: false
      description: >-
        Whether or not to pull the complete features and records for
        first-degree related entities (i.e.: the RelatedEntity instances
        will have the "partial" flag set to true rather than false).  If
        false, then all returned RelatedEntity instances will only contain
        partial data (the default).
      schema:
        type: boolean
        default: false
    featureModeQueryParam:
      in: query
      name: featureMode
      required: false
      description: >-
        The method by which feature values should be included for entities
        returned in the response.  The possible values are:
          * `NONE` - Do not include any feature values -- this is the fastest
                     option from a performance perspective because feature
                     values do not have to be retrieved.
          * `REPRESENTATIVE` - Include only a single representative value per
                               "unique" value of a feature.  If there are
                               multiple values that are near duplicates then
                               only one value is included and the others are
                               suppressed.
          * `WITH_DUPLICATES` - Group near-duplicate feature values and return
                                a representative value along with its near
                                duplicate values.
      schema:
        type: string
        enum:
          - NONE
          - REPRESENTATIVE
          - WITH_DUPLICATES
        default: WITH_DUPLICATES
    whyWithRelationshipsQueryParam:
      in: query
      name: withRelationships
      description: >-
        Set to `true` to include partial information of related entities for
        the returned entities.  This defaults to `false` for why operations.
      required: false
      schema:
        type: boolean
        default: false
    whyWithFeatureStatsQueryParam:
      in: query
      name: withFeatureStats
      description: >-
        Set to `false` to suppress resolution statistics for features.  This
        defaults to `true` for why operations.
      required: false
      schema:
        type: boolean
        default: true
    whyWithDerivedFeaturesQueryParam:
      in: query
      name: withDerivedFeatures
      description: >-
        Set to `false` to suppress "expressed" features that are derived
        composite keys such as `FULL_NAME` + `DATE_OF_BIRTH`.  This
        defaults to `true` for why operations.
      required: false
      schema:
        type: boolean
        default: true
    withFeatureStatsQueryParam:
      in: query
      name: withFeatureStats
      description: >-
        Set to `true` to include resolution statistics for features.  This
        defaults to `false`.
      required: false
      schema:
        type: boolean
        default: false
    withDerivedFeaturesQueryParam:
      in: query
      name: withDerivedFeatures
      description: >-
        Set to `true` to include "expressed" features that are derived composite
        keys such as name + date of birth keys.  This defaults to `false`.
      required: false
      schema:
        type: boolean
        default: false
    forceMinimalQueryParam:
      in: query
      name: forceMinimal
      required: false
      description: >-
        Whether or not to force the minimum entity detail in the response which
        may consist of nothing more than an entity ID.  This provides the
        fastest response to an entity query operation because no additional data
        needs to be retrieved other than what is directly accessible.
      schema:
        type: boolean
        default: false
    dataSourceCodePathParam:
      in: path
      name: dataSourceCode
      required: true
      description: >-
        The data source code identifying the data source.
      schema:
        type: string
    entityTypeCodePathParam:
      in: path
      name: entityTypeCode
      required: true
      description: >-
        The entity type code identifying the entity type.
      schema:
        type: string
    entityClassCodePathParam:
      in: path
      name: entityClassCode
      required: true
      description: >-
        The entity class code identifying the entity class.
      schema:
        type: string
    recordIdPathParam:
      in: path
      name: recordId
      required: true
      description: >-
        The identifier that uniquely identifies the requested record
        within a given data source.  This may have been specified
        when the record was loaded or generated automatically.
      schema:
        type: string
    progressPeriodParam:
      in: query
      name: progressPeriod
      required: false
      description: >-
        The suggested maximum time between SSE `progress` events specified in
        milliseconds.  If not specified then the default of `3000` milliseconds
        (i.e.: 3 seconds) is used.  This parameter is NOT used if the operation
        is not producing an SSE response (i.e.: `text/event-stream` media type
        was not requested via the `Accept` header).
      schema:
        type: string
        default: 3000
  responses:
    ServerError:
      description: Unexpected server error occurred.
      content:
        application/json; charset=UTF-8:
          schema:
            $ref: '#/components/schemas/SzErrorResponse'
        application/json:
          schema:
            $ref: '#/components/schemas/SzErrorResponse'
        default:
          schema:
            $ref: '#/components/schemas/SzErrorResponse'
  schemas:
    SzBaseResponse:
      description: >-
        Represents the base information included in all responses sans the
        actual data for the response.
      type: object
      properties:
        meta:
          type: object
          properties:
            httpMethod:
              description: >-
                The HTTP method that was used for the operation.
              type: string
              enum:
                - GET
                - POST
                - PUT
                - PATCH
                - DELETE
            httpStatusCode:
              description: >-
                The HTTP status response code.
              type: integer
              format: int16
            timestamp:
              description: >-
                The timestamp of the operation's execution.
              type: string
              format: date-time
            version:
              type: string
            restApiVersion:
              type: string
            timings:
              description: >-
                The timing measurements that were taken where the keys are
                identifying what was timed and the values are the number of
                milliseconds.
              type: object
              nullable: true
              additionalProperties:
                type: integer
                format: int64
        links:
          type: object
          properties:
            self:
              type: string
    SzErrorResponse:
      description: >-
        The response describing an error that occurred.
      allOf:
        - $ref: '#/components/schemas/SzBaseResponse'
        - type: object
          properties:
            errors:
              type: array
              items:
                $ref: '#/components/schemas/SzError'
    SzResponseWithRawData:
      description: >-
        Extends the BaseResponse to add the rawData field.
      allOf:
        - $ref: '#/components/schemas/SzBaseResponse'
        - type: object
          properties:
            rawData:
              description: >-
                The RAW result from the underlying native API function.
              type: object
              nullable: true
              additionalProperties: {}
    SzLicenseResponse:
      description: >-
        The response containing the license information.
      allOf:
        - $ref: '#/components/schemas/SzResponseWithRawData'
        - type: object
          properties:
            data:
              type: object
              properties:
                license:
                  $ref: '#/components/schemas/SzLicenseInfo'
    SzVersionResponse:
      description: >-
        The response containing the version information.
      allOf:
        - $ref: '#/components/schemas/SzResponseWithRawData'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/SzVersionInfo'
    SzServerInfoResponse:
      description: >-
        The response containing the server info.
      allOf:
        - $ref: '#/components/schemas/SzBaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/SzServerInfo'
    SzAttributeTypesResponse:
      description: >-
        The response containing attribute type information.
      allOf:
        - $ref: '#/components/schemas/SzResponseWithRawData'
        - type: object
          properties:
            data:
              type: object
              properties:
                attributeTypes:
                  description: >-
                    The list of attribute types.
                  type: array
                  items:
                    $ref: '#/components/schemas/SzAttributeType'
    SzAttributeTypeResponse:
      description: >-
        The response containing information for a single attribute type.
      allOf:
        - $ref: '#/components/schemas/SzResponseWithRawData'
        - type: object
          properties:
            data:
              type: object
              properties:
                attributeType:
                  $ref: '#/components/schemas/SzAttributeType'
    SzDataSourceResponse:
      description: >-
        The response describing a data source.
      allOf:
        - $ref: '#/components/schemas/SzResponseWithRawData'
        - type: object
          properties:
            data:
              type: object
              properties:
                dataSource:
                  description: >-
                    The requested data source as an `SzDataSource` object.
                  type: array
                  items:
                    $ref: '#/components/schemas/SzDataSource'
    SzDataSourcesResponse:
      description: >-
        The response describing the configured data sources.
      allOf:
        - $ref: '#/components/schemas/SzResponseWithRawData'
        - type: object
          properties:
            data:
              type: object
              properties:
                dataSources:
                  description: >-
                    The list of data source codes for the configured data
                    sources.
                  type: array
                  items:
                    type: string
                dataSourceDetails:
                  description: >-
                    The list of `SzDataSource` instances describing the data
                    sources that are configured.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/SzDataSource'
    SzEntityTypeResponse:
      description: >-
        The response describing an entity type.
      allOf:
        - $ref: '#/components/schemas/SzResponseWithRawData'
        - type: object
          properties:
            data:
              type: object
              properties:
                entityType:
                  description: >-
                    The requested entity type as an `SzEntityType` object.
                  type: array
                  items:
                    $ref: '#/components/schemas/SzEntityType'
    SzEntityTypesResponse:
      description: >-
        The response describing the configured entity types.
      allOf:
        - $ref: '#/components/schemas/SzResponseWithRawData'
        - type: object
          properties:
            data:
              type: object
              properties:
                entityTypes:
                  description: >-
                    The list of entity type codes for the configured entity
                    types.
                  type: array
                  items:
                    type: string
                entityTypeDetails:
                  description: >-
                    The list of `SzEntityType` instances describing the
                    configured entity types.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/SzEntityType'
    SzEntityClassResponse:
      description: >-
        The response describing an entity class.
      allOf:
        - $ref: '#/components/schemas/SzResponseWithRawData'
        - type: object
          properties:
            data:
              type: object
              properties:
                dataSource:
                  description: >-
                    The requested data source as an `SzEntityClass` object.
                  type: array
                  items:
                    $ref: '#/components/schemas/SzEntityClass'
    SzEntityClassesResponse:
      description: >-
        The response describing the configured entity classes.
      allOf:
        - $ref: '#/components/schemas/SzResponseWithRawData'
        - type: object
          properties:
            data:
              type: object
              properties:
                entityClasses:
                  description: >-
                    The list of entity classes codes for the configured entity
                    classes.
                  type: array
                  items:
                    type: string
                entityClassDetails:
                  description: >-
                    The list of `SzEntityClass` instances describing the
                    configured entity classes.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/SzEntityClass'
    SzConfigResponse:
      description: >-
        The response containing raw configuration in the rawData field.
      allOf:
        - $ref: '#/components/schemas/SzResponseWithRawData'
    SzLoadRecordResponse:
      allOf:
        - $ref: '#/components/schemas/SzBaseResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                recordId:
                  description: >-
                    The record ID of the record that was loaded.
                  type: string
    SzRecordResponse:
      description: >-
        The response describing an entity record.
      allOf:
        - $ref: '#/components/schemas/SzResponseWithRawData'
        - type: object
          properties:
            data:
              type: object
              properties:
                record:
                  description: >-
                    The `SzEntityRecord` describing the matching record.
                  $ref: '#/components/schemas/SzEntityRecord'
    SzEntityResponse:
      description: >-
        The response describing a resolved entity and possibly its related
        entities.
      allOf:
        - $ref: '#/components/schemas/SzResponseWithRawData'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/SzEntityData'
    SzAttributeSearchResponse:
      description: >-
        The response describing the resolved entities found from a search.
      allOf:
        - $ref: '#/components/schemas/SzResponseWithRawData'
        - type: object
          properties:
            data:
              type: object
              properties:
                searchResults:
                  description: >-
                    The array AttributeSearchResult instances describing the
                    entities matching the specified entity search attributes
                    including the AttributeSearchResultType for each.
                  type: array
                  items:
                    $ref: '#/components/schemas/SzAttributeSearchResult'
    SzEntityPathResponse:
      description: >-
        The response describing a path between two resolved entities.
      allOf:
        - $ref: '#/components/schemas/SzResponseWithRawData'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/SzEntityPathData'
    SzEntityNetworkResponse:
      description: >-
        The response describing a network of resolved entities.
      allOf:
        - $ref: '#/components/schemas/SzResponseWithRawData'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/SzEntityNetworkData'
    SzBulkDataAnalysisResponse:
      description: >-
        The response describing the analysis of bulk data records.
      allOf:
        - $ref: '#/components/schemas/SzBaseResponse'
        - type: object
          properties:
            data:
              description: >-
                The `SzBulkDataAnalysis` describing the analysis of the bulk
                records.
              $ref: '#/components/schemas/SzBulkDataAnalysis'
    SzBulkLoadResponse:
      description: >-
        The response describing the result of loading bulk data.
      allOf:
        - $ref: '#/components/schemas/SzBaseResponse'
        - type: object
          properties:
            data:
              description: >-
                The `SzBulkLoadResult` describing the load statistics from
                loading a bulk data set.
              $ref: '#/components/schemas/SzBulkLoadResult'
    SzWhyEntityResponse:
      description: >-
        The response describing the result of "why" operation.
      allOf:
        - $ref: '#/components/schemas/SzResponseWithRawData'
        - type: object
          properties:
            data:
              type: object
              properties:
                whyResults:
                  description: >-
                    The `SzWhyEntityResults` describing why from each
                    evaluated perspective within the entity.
                  type: array
                  items:
                    $ref: '#/components/schemas/SzWhyEntityResult'
                entities:
                  description: >-
                    The array of `SzEntityData` objects describing the entities
                    involved in the response.  This will include partial
                    information on the first-degree related entities to the
                    entity.
                  type: array
                  items:
                    $ref: '#/components/schemas/SzEntityData'
    SzWhyRecordsResponse:
      description: >-
        The response describing the result of "why" operation.
      allOf:
        - $ref: '#/components/schemas/SzResponseWithRawData'
        - type: object
          properties:
            data:
              type: object
              properties:
                whyResult:
                  description: >-
                    The `SzWhyRecordsResult` describing why from for the
                    specified records.
                  $ref: '#/components/schemas/SzWhyRecordsResult'
                entities:
                  description: >-
                    The array of `SzEntityData` objects describing the entities
                    involved in the response.  This will include partial
                    information on the first-degree related entities to the
                    entity.
                  type: array
                  items:
                    $ref: '#/components/schemas/SzEntityData'
    SzError:
      description: >-
        Describes an error.
      type: object
      properties:
        code:
          description: The internal error code.
          type: string
          nullable: true
        message:
          description: The message describing the error.
          type: string
    SzBulkLoadError:
      description: >-
        Describes an error and the number of times it occurred.
      type: object
      properties:
        error:
          description: >-
            The error that occurred.
          $ref: '#/components/schemas/SzError'
        occurrenceCount:
          description: >-
            The number of times the error occurred while loading data
            from the bulk data set.
          type: integer
          format: int32
    SzAttributeClass:
      description: >-
        Enumerates the various classes of attribute types (and features).
        This is a generalization over attribute type that is more general
        than feature type (NOTE: stand-alone attribute types such as
        "DATA_SOURCE" or "RECORD_ID" do not have a feature type, but do have
        an attribute class of "OBSERVATION").  Attribute class determines how
        attributes / features are grouped together (e.g.: "nameData" contains
        all name features and "identifierData" contains all identifier
        features).  The possible values are:
          * `ADDRESS` - Attributes pertaining to an address such as "POSTAL_CODE"
          * `CHARACTERISTIC` - Attributes pertaining to physical characteristics
                               of an entity.  Such as "BIRTH_DATE"
          * `IDENTIFIER` - Attributes pertaining to identifiers such as
                          drivers license number, passport number, or email
                          address.
          * `NAME` - Attributes pertaing to names such as "NAME_FIRST" or
                     "NAME_LAST"
          * `OBSERVATION` - Attributes pertaining to meta-data about the
                            observation (record) such as "RECORD_ID" or
                            "DATA_SOURCE"
          * `PHONE` - Attributes pertaining to phone numbers such
                      "PHONE_NUMBER" or "PHONE_EXTENSION"
          * `RELATIONSHIP` - Attributes pertaining to relationships such as
                             "RELATIONSHIP_TYPE".
          * `OTHER` - An attribute class for custom features or for attributes
                      that are loaded but not mapped.
      type: string
      enum:
        - ADDRESS
        - CHARACTERISTIC
        - IDENTIFIER
        - NAME
        - OBSERVATION
        - PHONE
        - RELATIONSHIP
        - OTHER
    SzAttributeNecessity:
      description: >-
        Describes the necessity for this attribute type within the
        feature type.  Possible values are:
          * `REQUIRED` - The attribute for the attribute type must be
                         provided whenever the feature is provided (e.g.:
                         "PASSPORT_NUMBER" is required with the "PASSPORT"
                         feature).
          * `SUFFICIENT` - If no attributes for `REQUIRED` attribute types
                           are provided for the feature, then at least one
                           marked `SUFFICIENT` must be provided (e.g.:
                           "NAME_FULL" or "NAME_ORG" for the "NAME" feature)
          * `PREFERRED` - Attributes of `PREFERRED` attribute types are
                          optional, but providing them greatly enhances
                          accuracy for scoring and matching purposes (e.g.:
                          a "PASSPORT_COUNTRY" for "PASSPORT" feature)
          * `OPTIONAL` - Attributes of `OPTIONAL` attribute types are
                         optional and do not significantly affect accuracy
                         for scoring and matching purposes, but do provide
                         additional information (e.g.: "PASSPORT_ISSUE_DT"
                         for the "PASSPORT" feature)
      type: string
      enum:
        - REQUIRED
        - SUFFICIENT
        - PREFERRED
        - OPTIONAL
    SzAttributeType:
      description: >-
        Describes an attribute type that partially (or fully) describes a
        feature of an entity that may be loaded as part of a record or
        used as criteria in a search.
      type: object
      properties:
        attributeCode:
          description: >-
            The unique string that identifies the attribute type among all
            other attribute types.
          type: string
          nullable: false
        defaultValue:
          description: >-
            The default value assumed for the attribute when it is not
            provided but is required as part of a feature.
          type: string
          nullable: true
        necessity:
          $ref: '#/components/schemas/SzAttributeNecessity'
        attributeClass:
          $ref: '#/components/schemas/SzAttributeClass'
        featureType:
          description: >-
            Identifiers the feature type that this attribute type is an
            attribute of (if any).  For example, the "NAME_FIRST" attribute type
            would be an attribute of the "NAME" feature type and
            "PASSPORT_COUNTRY" would be an attribute of "PASSPORT" feature type.
            Some (advanced) attribute types are stand-alone and do not belong
            to a feature (e.g.: "RECORD_ID").
          type: string
          nullable: true
        advanced:
          description: >-
            Indicates if the attribute type is considered to be "advanced".
            Advanced attribute types usually require the user to have some
            knowledge of how the data is mapped in the entity repository
            (e.g.: "RECORD_ID" or "DATA_SOURCE").  An application may exclude
            displaying these as options if these things are being auto-generated
            or automatically selected for the user.  You may want to contact
            Senzing support before leveraging advanced attribute types in your
            application.
          type: boolean
          nullable: false
        internal:
          description: >-
            Whether or not an attribute type is typically generated internally
            based on other attribute types.  These are not commonly used by the
            user except in some rare cases.  Examples include pre-hashed
            versions of attributes that are hashed.
          type: boolean
          nullable: false
    SzEntityIdentifier:
      description: >-
        Identifies an entity by either its entity ID or by the data source
        code and record ID of one of its constituent records.
      oneOf:
        - type: integer
          format: int64
        - $ref: '#/components/schemas/SzRecordId'
    SzEntityIdentifiers:
      description: >-
        Identifies zero or more entities by either its entity ID or by the
        data source code and record ID of one of their constituent records.
        Identifiers in the array are homogeneous, either all entity IDs or
        all RecordId instances containing the data-source-code/record-id pair.
      oneOf:
      - type: array
        items:
          type: integer
          format: int64
      - type: array
        items:
          $ref: '#/components/schemas/SzRecordId'
    SzRecordId:
      description: >-
        Identifies a record by its data source code and record identifier.
        This abbreviated format is used in query parameters to identify
        records via JSON strings.
      type: object
      properties:
        src:
          description: >-
            The data source code that uniquely identifies the data source
            associated with the record.
          type: string
        id:
          description: >-
            The record ID that uniquely identifies a record within the
            respective data source.
          type: string
    SzLicenseInfo:
      description: >-
        Describes the Senzing product license.
      type: object
      properties:
        customer:
          type: string
          description: >-
            The customer information associated with the license.
        contract:
          type: string
          description: >-
            The contract information associated with the license.
        licenseType:
          type: string
          description: >-
            The description of the type of license.
        licenseLevel:
          type: string
          description: >-
            The description of the license level.
        billing:
          type: string
          description: >-
            The billing information associated with the license
        issuanceDate:
          type: string
          format: date-time
          description: >-
            The issuance date for the license.
        expirationDate:
          type: string
          format: date-time
          description: >-
            The expiration date for the license.
        recordLimit:
          type: integer
          format: int64
          description: >-
            The record limit associated with the license.
    SzVersionInfo:
      description: >-
        Describes the Senzing version information.
      type: object
      properties:
        apiServerVersion:
          type: string
          description: >-
            The version of the REST API Server implementation.
        restApiVersion:
          type: string
          description: >-
            The version of the REST API Specification that is implemented.
        nativeApiVersion:
          type: string
          description: >-
            The version for the underlying runtime native Senzing API.
        nativeApiBuildNumber:
          type: string
          description: >-
            The build number for the underlying runtime native Senzing API.
        nativeApiBuildDate:
          type: string
          format: date-time
          description: >-
            The build date for the underlying runtime native Senzing API.
        configCompatibilityVersion:
          type: string
          description: >-
            The configuration compatibility version for the underlying runtime
            native Senzing API.
    SzEntityRecord:
      description: >-
        Describes a record (aka: observed entity) that has been loaded for
        a particular data source.
      type: object
      properties:
        dataSource:
          type: string
          description: >-
            The data source code identifying the source from which the record
            was loaded.
        recordId:
          type: string
          description: >-
            The identifier that uniquely identifies this record from other
            records from the same data source.  This may have been loaded with
            the record or automatically generated from the record's data.
        addressData:
          description: >-
            An array of addresses associated with the record that are formatted
            for readability.  These may be prefixed by a "usage type" if one
            was provided (e.g.: "HOME: 101 Main Street")
          type: array
          items:
            type: string
        characteristicData:
          description: >-
            An array of characteristics associated with the record that are
            formatted for readability.  These will be prefixed by a
            characteristic type and optionally by a "usage type" if one was
            provided.
          type: array
          items:
            type: string
        identifierData:
          description: >-
            An array of entity data associated with the record where the items
            are formatted for readability.  These will be prefixed by an
            identifier type and may be prefixed by a "usage type" if one was
            provided (e.g.: "ID: 123456789" or "EMAIL: WORK: joe@nowhere.com")
          type: array
          items:
            type: string
        nameData:
          description: >-
            An array of names associated with the record that are formatted for
            readability.  These may be prefixed by a "usage type" if one was
            provided (e.g.: "Joe Schmoe" or "AKA: Joseph P. Schmoe")
          type: array
          items:
            type: string
        phoneData:
          description: >-
            An array of phone numbers associated with the record that are
            formatted for readability.  These may be prefixed by a "usage type"
            if one was provided (e.g.: "HOME: 702-555-1212")
          type: array
          items:
            type: string
        relationshipData:
          description: >-
            An array of relationship data items associated with the record that
            describes disclosed relationships.
          type: array
          items:
            type: string
        otherData:
          description: >-
            An array of associated data items that were loaded with the record
            but not normally recognized or used for entity resolution.  This
            array usually contains useful information from the source system.
          type: array
          items:
            type: string
        originalSourceData:
          description: >-
            The JSON representation of the original data record that was
            loaded.
          type: object
          additionalProperties: {}
    SzMatchedRecord:
      description: >-
        Provides the additional fields to an SzEntityRecord that describe
        how it matched to the entity that it belongs to.
      allOf:
        - $ref: '#/components/schemas/SzEntityRecord'
        - type: object
          properties:
            matchKey:
              description: >-
                The match key describing what features matched between
                the first record in the resolved entity and this record.
                This is blank for the first record.
              type: string
            resolutionRuleCode:
              description: >-
                The code identifying the resolution rule that matched this
                record to the first record in the resolved entity.  This is
                blank for the first record.
              type: string
            matchScore:
              description: >-
                The match score between the first record in the resolved
                entity and this record.  The higher the score the closer
                the match.  This is `null` for the first record in the
                resolved entity.
              type: integer
              format: int32
              nullable: true
            matchLevel:
              description: >-
                The integer "match level" describing how the first record in
                the resolved entity matched to this record.  This is zero for
                the first record and usually one (1) for other records.
              type: integer
              format: int32
            refScore:
              description: >-
                The ref score between the first record in the resolved entity
                and this record.  This is zero (0) for the first record in the
                resolved entity.
              type: integer
              format: int32
    SzDataSourceRecordSummary:
      description: >-
        Describes the number of records associated with a specific data source
        for a given resolved entity.  Optionally, if the complete set of records
        has been retrieved for the associated entity, then this may also contain
        the "top 10" record IDs for the associated data source.
      type: object
      properties:
        dataSource:
          description: >-
            The data source code identifying the data source for which the
            record breakdown is being described.
          type: string
        recordCount:
          description: >-
            The number of records from the respective data source that are
            part of the associated resolved entity.
          type: integer
          format: int32
        topRecordIds:
          description: >-
            The optional array of string record ID's identifying the top 10
            records for the associated entity from the respective data source.
            This may be null or an empty array if the data was not available.
          type: array
          nullable: true
          items:
            type: string
    SzEntityFeatureStatistics:
      description: >-
        Describes the entity resolution statistics for the feature value.
      type: object
      properties:
        usedForCandidates:
          description: >-
            Indicates if the feature is used for finding candidates during
            entity resolution.
          type: boolean
        usedForScoring:
          description: >-
            Indicates if the feature is used for scoring during entity
            resolution.
          type: boolean
        entityCount:
          description: >-
            The number of entities having this feature value.
          type: integer
          format: int64
        candidateCapReached:
          description: >-
            Indicates if this feature value is no longer being used to find
            candidates because too many entities share the same value.
          type: boolean
        scoringCapReached:
          description: >-
            Indicates if this feature value is no longer being used in entity
            scoring because too many entities share the same value.
          type: boolean
        suppressed:
          description: >-
            Indicates if this value was suppressed in favor of a more complete
            value.
          type: boolean
    SzEntityFeatureDetail:
      description: >-
        Describes the details of an entity feature value, optionally including
        statistics if they have been requested.
      type: object
      properties:
        internalId:
          description: >-
            The internal ID for the feature value.
          type: integer
          format: int64
        featureValue:
          description: >-
            The feature value.
          type: string
        statistics:
          description: >-
            The `SzEntityFeatureStatistics` describing the statistics for the
            feature value.  This may be `null` if the statistics were not
            requested.
          nullable: true
          $ref: ''#/components/schemas/SzEntityFeatureStatistics'
    SzEntityFeature:
      description: >-
        Describes a feature for an entity as well as including any close values
        for the feature that were considered to be duplicate values for
        entity resolution purposes.
      type: object
      properties:
        primaryId:
          description: >-
            The internal ID for the primary feature value.
          type: integer
          format: int64
        primaryValue:
          description: >-
            The primary value for the feature.
          type: string
        usageType:
          description: >-
            The optional associated usage type (e.g.: "HOME" or "WORK")
          type: string
          nullable: true
        duplicateValues:
          description: >-
            The array of values that are close enough to the primary value
            for the feature that they are considered to be duplicate values for
            the purpose of entity resolution.
          type: array
          items:
            type: string
        featureDetails:
          description: >-
            The array of `SzEntityFeatureDetail` instances describing the each
            of the clustered feature values in detail.
          type: array
          items:
            $ref: ''#/components/schemas/SzEntityFeatureDetail'
    SzResolvedEntity:
      description: >-
        Describes a resolved entity that is made up of one or more
        SzMatchedRecord instances.
      type: object
      properties:
        entityId:
          description: >-
            The unique numeric ID identifying the entity.
          type: integer
          format: int64
        entityName:
          description: >-
            The name associated with this entity that is considered the
            best name among all the associated names.
          type: string
        bestName:
          description: >-
            Usually the same as the entityName property, but this may differ
            if the entity was found based on a name search.  In such a case,
            this field represents the name that most closely matches the name
            that was searched on.
          type: string
        recordSummaries:
          description: >-
            The array of DataSourceRecordSummary instances describing the
            number of records associated with each data source that contributes
            to this entity.
          type: array
          items:
            $ref: '#/components/schemas/SzDataSourceRecordSummary'
        nameData:
          description: >-
            An array of names associated with the entity that are formatted for
            readability.  These may be prefixed by a "usage type" if one was
            provided (e.g.: "Joe Schmoe" or "AKA: Joseph P. Schmoe")
          type: array
          items:
            type: string
        characteristicData:
          description: >-
            An array of characteristiics associated with the entity that are
            formatted for readability.  These will be prefixed by a
            characteristic type and optionally by a "usage type" if one was
            provided.
          type: array
          items:
            type: string
        addressData:
          description: >-
            An array of addresses associated with the entity that are formatted
            for readability.  These may be prefixed by a "usage type" if one
            was provided (e.g.: "HOME: 101 Main Street")
          type: array
          items:
            type: string
        phoneData:
          description: >-
            An array of phone numbers associated with the entity that are
            formatted for readability.  These may be prefixed by a "usage type"
            if one was provided (e.g.: "HOME: 702-555-1212")
          type: array
          items:
            type: string
        identifierData:
          description: >-
            An array of entity data associated with the record where the items
            are formatted for readability.  These will be prefixed by an
            identifier type and may be prefixed by a "usage type" if one was
            provided (e.g.: "ID: 123456789" or "EMAIL: WORK: joe@nowhere.com")
          type: array
          items:
            type: string
        records:
          description: >-
            The array of `SzMatchedRecord` instances describing the records
            associated with this entity.
          type: array
          items:
            $ref: '#/components/schemas/SzMatchedRecord'
        features:
          description: >-
            The map of string feature names to arrays of SzEntityFeature instances
            describing the values associated with each respective feature name.
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/SzEntityFeature'
        partial:
          description: >-
            If true then this `SzResolvedEntity` has complete features and
            records, otherwise they are not provided.  Also, the
            recordSummary items may be missing the topRecordIds if partial
            is true.  This can be true for partially retrieved related
            entities or if features are suppressed or if the minimal
            response flag has been specified.
          type: boolean
    SzBaseRelatedEntity:
      description: >-
        Provides the additional fields to an SzResolvedEntity that describe
        an entity's relationship to another.  This serves as a basis for
        SzAttributeSearchResult and SzRelatedEntity.
      allOf:
        - $ref: '#/components/schemas/SzResolvedEntity'
        - type: object
          properties:
            matchLevel:
              description: >-
                The integer "match level" describing how the related entity
                matched to the primary resolved entity.
              type: integer
              format: int32
            fullNameScore:
              description: >-
                The full name score between the primary resolved entity and
                this related entity.  The higher the score the closer the
                name match.
              type: integer
              format: int32
            matchScore:
              description: >-
                The match score between the primary resolved entity and
                this related entity.  The higher the score the closer
                the match.
              type: integer
              format: int32
              nullable: true
            disclosed:
              description: >-
                A boolean flag indicating if this related entity
                represents a disclosed relationship.
              type: boolean
            ambiguous:
              description: >-
                A boolean flag indicating if this related entity
                represents an ambiguous relationship.
              type: boolean
            matchKey:
              description: >-
                The match key describing what features matched between
                the primary resolved entity and the related entity.
              type: string
            resolutionRuleCode:
              description: >-
                The code identifying the resolution rule that related
                this entity to the primary resolved entity.
              type: string
            refScore:
              description: >-
                The ref score between the primary resolved entity and
                this related entity.
              type: integer
              format: int32
    SzRelationshipType:
      description: >-
        Describes how an entity is related to another (either a possible match,
        a discovered possible relationship or a disclosed relationship)
      type: string
      enum:
        - POSSIBLE_MATCH
        - POSSIBLE_RELATION
        - DISCLOSED_RELATION
    SzRelatedEntity:
      description: >-
        Provides a description of an entity that is related to a
        ResolvedEntity.  This describes how the entity is related and may
        be missing the complete features and record list of a ResolvedEntity.
      allOf:
        - type: object
          properties:
            relationType:
              $ref: '#/components/schemas/SzRelationshipType'
        - $ref: '#/components/schemas/SzBaseRelatedEntity'
    SzEntityData:
      description: >-
        Describes an entity and the entities related to that entity at
        one degree of separation.
      type: object
      properties:
        resolvedEntity:
          description: The ResolvedEntity describing the primary entity.
          $ref: '#/components/schemas/SzResolvedEntity'
        relatedEntities:
          description: >-
            The array of RelatedEntity instances describing the possible
            matches, discovered relationships, and disclosed relationships.
          type: array
          items:
            $ref: '#/components/schemas/SzRelatedEntity'
    SzAttributeSearchResultType:
      description: >-
        Describes how the entity matching the search attributes would have
        entity resolved against those attributes (either a match, possible
        match, discovered relationship or name only match).
      type: string
      enum:
        - MATCH
        - POSSIBLE_MATCH
        - POSSIBLE_RELATION
        - NAME_ONLY_MATCH
    SzAttributeSearchResult:
      description: >-
        Describes an entity that matched attribute search criteria and how
        it matched against that criteria.
      allOf:
        - type: object
          properties:
            relatedEntities:
              description: >-
                The array of RelatedEntity instances describing the possible
                matches, discovered relationships, and disclosed relationships.
              type: array
              items:
                $ref: '#/components/schemas/SzRelatedEntity'
            resultType:
              $ref: '#/components/schemas/SzAttributeSearchResultType'
        - $ref: '#/components/schemas/SzBaseRelatedEntity'
    SzEntityPath:
      description: >-
        Describes a path between two entities using the entity IDs of the
        entities in the path.
      type: object
      properties:
        startEntityId:
          description: The starting entity ID for the path.
          nullable: false
          type: integer
          format: int64
        endEntityId:
          description: The ending entity ID for the path.
          nullable: false
          type: integer
          format: int64
        entityIDs:
          description: >-
            The array of entity IDs identifying the entities on the path
            in order of how are they are connected on the path.  This is
            null if there is no path between the entities.
          nullable: true
          type: array
          items:
            type: integer
            format: int64
    SzEntityPathData:
      description: >-
        Describes a path between two entities using the entity IDs of the
        entities in the path and includes the data from the actual entities
        on the path.
      type: object
      properties:
        entityPath:
          $ref: '#/components/schemas/SzEntityPath'
        entities:
          description: >-
            The array of `SzEntityData` objects describing the entities on the
            path.  This will include partial information on the first-degree
            related entities to the entity.
          type: array
          items:
            $ref: '#/components/schemas/SzEntityData'
    SzEntityNetworkData:
      description: >-
        Describes a network of paths between entities using the entity IDs of
        the entities in the path and includes the data from the actual entities
        in the network.
      type: object
      properties:
        entityPaths:
          description: >-
            The array of `SzEntityPath` objects describing the paths that make
            up the entity network (including island networks).
          type: array
          items:
            $ref: '#/components/schemas/SzEntityPath'
        entities:
          description: >-
            The array of `SzEntityData` objects describing the entities on the
            path.  This may only include partial information on the entities at
            the edge of the network.
          type: array
          items:
            $ref: '#/components/schemas/SzEntityData'
    SzServerInfo:
      description: >-
        Provides information about which server features are enabled and which
        are not enabled.
      type: object
      properties:
        concurrency:
          description: >-
            The number of Senzing worker threads pooled for handling requests.
          type: integer
          format: int32
          nullable: false
        activeConfigId:
          description: >-
            The active configuration ID being used by the API server.  This
            is still available if the server was started with a static file
            configuration via the `G2CONFIGFILE` initialization property.
          type: integer
          format: int32
          nullable: false
        dynamicConfig:
          description: >-
            Whether or not the server will automatically pickup the latest
            default configuration if it changes.
          type: boolean
          nullable: false
        readOnly:
          description: >-
            Whether or not the server was started in read-only mode.  If in
            read-only mode then operations that modify the repository (e.g.:
            loading records or configuring new data sources) are not allowed.
          type: boolean
          nullable: false
        adminEnabled:
          description: >-
            Whether or not admin features are enabled.  If admin features are
            not enabled then the configuration cannot be modified.
          type: boolean
          nullable: false
    SzDataSource:
      description: Describes a data source.
      type: object
      properties:
        dataSourceCode:
          description: The data source code.
          type: string
          nullable: false
        dataSourceId:
          description: >-
            The data source ID. The value can be null when used for input in
            creating a data source to indicate that the data source ID should
            be auto-generated.
          type: integer
          format: int32
          nullable: true
    SzEntityType:
      description: Describes an entity type.
      type: object
      properties:
        entityTypeCode:
          description: The entity type code.
          type: string
          nullable: false
        entityClassCode:
          description: The entity class code associated with the entity type.
          type: string
          nullable: false
        entityTypeId:
          description: >-
            The entity type ID.  The value can be null when used for input in
            creating an entity type to indicate that the entity type ID should
            be auto-generated.
          type: integer
          format: int32
          nullable: true
    SzEntityClass:
      description: Describes an entity class.
      type: object
      properties:
        entityClassCode:
          description: The entity class code.
          type: string
          nullable: false
        entityClassId:
          description: >-
            The entity class ID.  The value can be null when used for input in
             creating an entity class to indicate that the entity class ID
             should be auto-generated.
          type: integer
          format: int32
          nullable: true
        resolving:
          description: >-
            Whether or not entities having entity types belong to this entity
            class will resolve with each other.  This is `true` if they will
            resolve and `false` if they will not.
          type: boolean
          nullable: true
    SzDataSourceDescriptor:
      description: >-
        Describes a data source either as only its data source code or as an
        `SzDataSource` object.
      oneOf:
        - type: string
        - $ref: '#/components/schemas/SzDataSource'
    SzEntityTypeDescriptor:
      description: >-
        Describes an entity type either as only its entity type code or as an
        `SzEntityType` object.
      oneOf:
        - type: string
        - $ref: '#/components/schemas/SzEntityType'
    SzEntityClassDescriptor:
      description: >-
        Describes an entity class either as only its entity class code or as an
        `SzEntityClass` object.
      oneOf:
        - type: string
        - $ref: '#/components/schemas/SzEntityClass'
    SzDataSourceRecordAnalysis:
      description: >-
        Provides statistics specific to a given data source of the records
        found in bulk data.
      type: object
      properties:
        dataSource:
          description: >-
            The data source code identifying the data source for which the
            statistics are being provided.  This is `null` if the statistics
            pertain to those records with no data source defined in the
            source data.
          type: string
          nullable: true
        recordCount:
          description: >-
            The number of records having the associated data source.
          type: integer
          format: int32
        recordsWithRecordIdCount:
          description: >-
            The number of records having the associated data source that
            include a `RECORD_ID` value.
          nullable: false
          type: integer
          format: int32
        recordsWithEntityTypeCount:
          description: >-
            The number of records having the associated data source that
            include an `ENTITY_TYPE` value.
          nullable: false
          type: integer
          format: int32
    SzEntityTypeRecordAnalysis:
      description: >-
        Provides statistics specific to a given entity type of the records
        found in bulk data.
      type: object
      properties:
        entityType:
          description: >-
            The entity type code identifying the entity type for which the
            statistics are being provided.  This is `null` if the statistics
            pertain to those records with no entity type defined in the
            source data.
          type: string
          nullable: true
        recordCount:
          description: >-
            The number of records having the associated entity type.
          type: integer
          format: int32
        recordsWithRecordIdCount:
          description: >-
            The number of records having the associated entity type that
            include a `RECORD_ID` value.
          nullable: false
          type: integer
          format: int32
        recordsWithDataSourceCount:
          description: >-
            The number of records having the associated entity type that
            include a `DATA_SOURCE` value.
          nullable: false
          type: integer
          format: int32
    SzBaseBulkLoadResult:
      description: >-
        Provides statistics specific common to all bulk load results regardless
        of how they are aggregated.
      type: object
      properties:
        recordCount:
          description: >-
            The number of records found in the bulk data set with the aggregate
            group.  This may not match the number of "observed entities" once
            loaded since some records may be exact duplicates.
          type: integer
          format: int32
        loadedRecordCount:
          description: >-
            The number of records successfully loaded from the bulk data set
            within the aggregate group.  This may not match the number
            of "observed entities" loaded since some records may be exact
            duplicates.
          type: integer
          format: int32
        incompleteRecordCount:
          description: >-
            The number of records from the bulk data set within the aggregate
            group that are missing either a `DATA_SOURCE` value or `ENTITY_TYPE`
            value.
          type: integer
          format: int32
        failedRecordCount:
          description: >-
            The number of records from the bulk data set within the aggregate
            group that failed to load.
          type: integer
          format: int32
        topErrors:
          description: >-
            The array of top error occurrences with the number of times they
            occurred when loading records with the associated data source.
          type: array
          items:
            $ref: '#/components/schemas/SzBulkLoadError'
    SzDataSourceBulkLoadResult:
      description: >-
        Provides bulk data load statistics specific to a given data source.
      allOf:
        - $ref: '#/components/schemas/SzBaseBulkLoadResult'
        - type: object
          properties:
            dataSource:
              description: >-
                The data source code identifying the data source for which the
                load statistics are being provided.
              type: string
              nullable: false
    SzEntityTypeBulkLoadResult:
      description: >-
        Provides bulk data load statistics specific to a given enitty type.
      allOf:
        - $ref: '#/components/schemas/SzBaseBulkLoadResult'
        - type: object
          properties:
            entityType:
              description: >-
                The entity type code identifying the entity type for which the
                load statistics are being provided.
              type: string
              nullable: false
    SzBulkDataStatus:
      description: >-
        Describes the status of a bulk data operation:
          * `NOT_STARTED` - The bulk data operation has not started.
          * `IN_PROGRESS` - If bulk data operation is in progress.
          * `ABORTED` - The bulk data operation was aborted.
          * `COMPLETED` - The bulk data operation completed normally.
      type: string
      enum:
        - NOT_STARTED
        - IN_PROGRESS
        - ABORTED
        - COMPLETED
    SzBulkDataAnalysis:
      description: >-
        Describes the analysis performed against a set of bulk data records
        described as a JSON array, JSON Lines format or CSV format.
      type: object
      properties:
        status:
          description: >-
            The state of the bulk load.
          $ref: '#/components/schemas/SzBulkDataStatus'
        characterEncoding:
          description: >-
            The character encoding used to process the bulk data.
          nullable: false
          type: string
        mediaType:
          description: >-
            The media type of the bulk data.
          nullable: false
          type: string
        recordCount:
          description: >-
            The number of records found in the bulk data.  This may not match
            the number of "observed entities" once loaded since some records
            may be exact duplicates.
          nullable: false
          type: integer
          format: int32
        recordsWithRecordIdCount:
          description: >-
            The number of records provided that include a `RECORD_ID` value.
          nullable: false
          type: integer
          format: int32
        recordsWithDataSourceCount:
          description: >-
            The number of records provided that include a `DATA_SOURCE` value.
          nullable: false
          type: integer
          format: int32
        recordsWithEntityTypeCount:
          description: >-
            The number of records provided that include a `ENTITY_TYPE` value.
          nullable: false
          type: integer
          format: int32
        analysisByDataSource:
          description: >-
            The array of `SzDataSourceRecordAnalysis` elements providing statistics on the records by data source.
          nullable: false
          type: array
          items:
            $ref: '#/components/schemas/SzDataSourceRecordAnalysis'
        analysisByEntityType:
          description: >-
            The array of `SzEntityTypeRecordAnalysis` elements providing statistics on the records by entity type.
          nullable: false
          type: array
          items:
            $ref: '#/components/schemas/SzEntityTypeRecordAnalysis'
    SzBulkLoadResult:
      description: >-
        Describes the result from loading a set of bulk data records
        described as a JSON array, JSON Lines format or CSV format.
      allOf:
        - $ref: '#/components/schemas/SzBaseBulkLoadResult'
        - type: object
          properties:
            status:
              description: >-
                The state of the bulk load.
              $ref: '#/components/schemas/SzBulkDataStatus'
            characterEncoding:
              description: >-
                The character encoding used to process the bulk data.
              nullable: false
              type: string
            mediaType:
              description: >-
                The media type of the bulk data.
              nullable: false
              type: string
            missingDataSourceCount:
              description: >-
                The number of records that are incomplete because they are
                missing the `DATA_SOURCE` field.
              nullable: false
              type: integer
              format: int32
            missingEntityTypeCount:
              description: >-
                The number of records that are incomplete because they are
                missing the `ENTITY_TYPE` field.
              nullable: false
              type: integer
              format: int32
            resultsByDataSource:
              description: >-
                The array of `SzDataSourceBulkDataResult` elements describing
                the load statistics by data source.
              nullable: false
              type: array
              items:
                $ref: '#/components/schemas/SzDataSourceBulkLoadResult'
            resultsByEntityType:
              description: >-
                The array of `SzEntityTypeBulkDataResult` elements describing
                the load statistics by entity type.
              nullable: false
              type: array
              items:
                $ref: '#/components/schemas/SzEntityTypeBulkLoadResult'
    SzFocusRecordId:
      description: >-
        Identifies a focus record for an `SzWhyResult`.
      type: object
      properties:
        dataSource:
          description: >-
            The data source code that uniquely identifies the data source
            associated with the record.
          type: string
        recordId:
          description: >-
            The record ID that uniquely identifies a record within the
            respective data source.
          type: string
    SzScoringFrequency:
      description: >-
        Enumerates the various scoring behavior frequencies for entity features.
        This indicates the number of entities that would typically share the
        same value for a feature of this type.  The possible values are:
          * `ALWAYS_ONE` - The feature value belongs to exactly one entity so
                           if two records share this value they will always
                           merge together.
          * `ONE` - The feature value typically belongs to one entity (like a
                    Social Security Number, Tax ID or Drivers License Number)
          * `FEW` - The feature value typically belongs to at most a few
                    entities (like an Address or Phone Number).
          * `MANY` - The feature value can belong to many entities (like a
                     date of birth)
          * `VERY_MANY` - The feature can belong to very many entities (like
                          a gender).
          * `NAME` - A special frequency used for name features since they have
                     unique properties.
      type: string
      enum:
        - ALWAYS_ONE
        - ONE
        - FEW
        - MANY
        - VERY_MANY
        - NAME
    SzScoringBehavior:
      description: >-
        Describes the scoring behavior for a feature / feature type.
      type: object
      properties:
        code:
          description: >-
            The code identifying the behavior.
          type: string
        frequency:
          description: >-
            The number of entities that that would typically share the same
            value for a feature of type.  This value can only be `null` if the
            frequency is unknown for the scoring behavior code that is returned.
          nullable: true
          $ref: '#/components/schemas/SzScoringFrequency'
        exclusive:
          description: >-
            `true` if an entity should typically have only one value for
            a feature of this type (like a Social Security Number, Date of
            Birth) and `false` if the entity can typically have multiple values
            for the feature type (like Address or Phone Number).  This value is
            `null` if exclusivity is not applicable to the scoring behavior such
            as with special scoring behaviors like `NAME`.
          type: boolean
          nullable: true
        stable:
          description: >-
            `true` if the feature value for the feature type remains constant
            for an entity over time (like a Date of Birth), and `false` if it
            can can change for the entity over time (like a Home Address).  This
            is `null` if the stability is not applicable to the scoring behavior
            such as with special behaviors like `NAME`.
          type: boolean
          nullable: true
    SzScoringBucket:
      description: >-
        Describes the scoring bucket that a feature score falls into.  The
        range of scores constitute different buckets depending on the feature
        type..  The possible values are:
            * `SAME` - The two feature values are considered to be the same.
            * `CLOSE` - The two feature values are considered to be close.
            * `LIKELY` - The two feature values are similar, but not enough to
                         be considered `CLOSE`.
            * `PLAUSIBLE` - It's possible that the two feature values are the
                            same but almost just as likely that they are not.
            * `UNLIKELY` - It's unlikely that the two feature values represent
                           the same value.
            * `NO_CHANCE` - The two feature values obviously represent different
                            values.
      type: string
      enum:
        - SAME
        - CLOSE
        - LIKELY
        - PLAUSIBLE
        - UNLIKELY
        - NO_CHANCE
    SzScoredFeature:
      description: >-
        A description of a feature that has been scored against another feature.
      type: object
      properties:
        featureId:
          description: >-
            The identifier uniquely identifying the feature.
          type: integer
          format: int64
        featureType:
          description: >-
            The feature type of the feature.
          type: string
        featureValue:
          description: >-
            The value of the feature that was scored.
          type: string
        usageType:
          description: >-
            The usage type assigned to the feature value.
          type: string
    SzFeatureScore:
      description: >-
        Describes the scoring between two `SzScoredFeature` instances.
      type: object
      properties:
        featureType:
          description: >-
            The feature type of the features being scored.
        inboundFeature:
          description: >-
            The inbound feature described as an `SzScoredFeature`.
          $ref: '#/components/schemas/SzScoredFeature'
        candidateFeature:
          description: >-
            The feature that was a candidate match for the inbound feature (also
            described as an `SzScoredFeature`).
          $ref: '#/components/schemas/SzScoredFeature'
        score:
          description: >-
            The integer score between the two feature values (typically from 0
            to 100)
          type: integer
          format: int32
        bucket:
          description: >-
            The `SzScoringBucket` describing the meaning of the `score`.
          $ref: '#/components/schemas/SzScoringBucket'
        scoringBehavior:
          description: >-
            The `SzScoringBehavior` describing the scoring behavior for the
            features.
          $ref: '#/components/schemas/SzScoringBehavior'
    SzCandidateKey:
      description: >-
        Describes a candidate key that triggered the scoring of two entities.
      type: object
      properties:
        featureId:
          description: >-
            The identifier for the candidate feature.
          type: integer
          format: int64
        featureType:
          description: >-
            The feature type for the candidate feature.
          type: string
        featureValue:
          description: >-
            The feature value for the candidate feature.
          type: string
    SzMatchInfo:
      description: >-
        The match info describing why two entities (or records) resolve or
        relate to one another.
      type: object
      properties:
        whyKey:
          description: >-
            The why key indicating the components of the match (similar to the
            match key).
          nullable: false
          type: string
        resolutionRule:
          description: >-
            The resolution rule that triggered the match.
          nullable: false
          type: string
        candidateKeys:
          description: >-
            The map of feature types to arrays of `SzCandidateKey` instances
            for that feature type.
          nullable: false
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/SzCandidateKey'
        featureScores:
          description: >-
            The map of feature types to arrays of `SzFeatureScore` instances
            for that feature type.
          nullable: false
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/SzFeatureScore'
    SzWhyPerspective:
      description: >-
        Describes the perspective used in evaluating why an entity resolved
        or why two records may or may not resolve.  The answer to "why" is
        dependent on which "record" you are comparing against the other
        "records".  Internally, it is not always based on "record" because
        multiple records that are effectively identical collapse into a single
        perspective.
      properties:
        internalId:
          description: >-
            The internal ID uniquely identifying this perspective from others
            in the complete "why" response.
          nullable: false
          type: integer
          format: int64
        entityId:
          description: >-
            The associated entity ID for the perspective.
          nullable: false
          type: integer
          format: int64
        focusRecords:
          description: >-
            The array of `SzFocusRecordId` instances identifying the effectively
            identical records that are being compared against the other records.
          nullable: false
          type: array
          items:
            $ref: '#/components/schemas/SzFocusRecordId'
    SzWhyEntityResult:
      description: >-
        Describes why an entity resolved.
      type: object
      properties:
        perspective:
          description: >-
            The `SzWhyPerspective` identifying and describing the perspective
            for this why result.
          $ref: '#/components/schemas/SzWhyPerspective'
        matchInfo:
          description: >-
            The `SzMatchInfo` providing the details of the result.
          nullable: false
          $ref: '#/components/schemas/SzMatchInfo'
    SzWhyRecordsResult:
      description: >-
        Describes why two records might resolve.
      type: object
      properties:
        perspective1:
          description: >-
            The `SzWhyPerspective` identifying and describing the perspective
            from the first record.
          $ref: '#/components/schemas/SzWhyPerspective'
        perspective2:
          description: >-
            The `SzWhyPerspective` identifying and describing the perspective
            from the second record.
          $ref: '#/components/schemas/SzWhyPerspective'
        matchInfo:
          description: >-
            The `SzMatchInfo` providing the details of the result.
          nullable: false
          $ref: '#/components/schemas/SzMatchInfo'
tags:
  - name: Admin
    description: Administrative operations.
  - name: Config
    description: Configuration operations.
  - name: Entity Data
    description: Entity and record data operations.
  - name: Entity Graph
    description: Entity relationship connections for graphing.
  - name: Bulk Data
    description: Preparation and loading of bulk data.

